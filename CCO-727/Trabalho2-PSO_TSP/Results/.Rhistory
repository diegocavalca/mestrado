main = "Forecasting - Proximos 12 meses",
ylab = "Despesas (R$)",
xlab = "Periodo",
xaxt = "n")
grid()
axis(1, at = seq(periodoHistorico[1], periodoHistorico[2], along = serie), labels = format(seq(as.Date("2013-01-01"), by = "month", along = serie), "%m/%Y"))
axis(1, at = seq(periodoPrevisao[1], periodoPrevisao[2], along = p), labels = format(seq(as.Date("2015-01-01"), by = "month", along = p), "%m/%Y"))
legend('topright',
c("Historico","HW (Forecasting)") ,
col=c('black', 'red'),
lty=1,
bty='n',
cex=.75)
require(graphics)
options(scipen = 10)
# Dados historicos (2013-2014)
#historico <- read.csv(file="C:/Users/Diego/Desktop/DESPESAS PREFEITURA MUNICIPAL DE MARILIA/historico.csv", head=TRUE, sep=";")
historico <- read.csv(file="/Users/diegocavalca/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/historico.csv", head=TRUE, sep=";", fileEncoding="LATIN1")
# Imprime as variaveis existentes
names(historico)
# Serie temporal historica (01/2013 a 12/2014)
serie<-ts(historico$VALOR,start=c(2013,1),end=c(2014,12),frequency=12)
periodoHistorico = attributes(serie)$tsp
# Realiza o metodo Holt-Winters
holt <- HoltWinters(serie)
# Plota a serie temporal
plot(holt,
main = "Holt-Winters - Balanco de despesas (01/2013 a 12/2014)",
ylab = "Despesas (R$)",
xlab = "Periodo",
type="o",
xaxt="n")
grid()
axis(1, at = seq(periodoHistorico[1], periodoHistorico[2], along = serie), labels = format(seq(as.Date("2013-01-01"), by = "month", along = serie), "%m/%Y"))
legend('topright',
c("Historico","HW (Forecasting)") ,
col=c('black', 'red'),
lty=1,
bty='n',
cex=.75)
# Plota a decomposicao da serie
plot(fitted(holt),
main="Decomposicao historica")
#Realiza a previsao para 12 meses a frente (95% intervalo de confianca)
p <- predict(holt, 12, prediction.interval = FALSE, level = 0.95)
periodoPrevisao = attributes(p)$tsp;
# Plota cen?rio forecasting...
plot(holt, p,
type = "o",
main = "Forecasting - Proximos 12 meses",
ylab = "Despesas (R$)",
xlab = "Periodo",
xaxt = "n")
grid()
axis(1, at = seq(periodoHistorico[1], periodoHistorico[2], along = serie), labels = format(seq(as.Date("2013-01-01"), by = "month", along = serie), "%m/%Y"))
axis(1, at = seq(periodoPrevisao[1], periodoPrevisao[2], along = p), labels = format(seq(as.Date("2015-01-01"), by = "month", along = p), "%m/%Y"))
legend('topright',
c("Historico","HW (Forecasting)") ,
col=c('black', 'red'),
lty=1,
bty='n',
cex=.75)
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-turchin/9/R")))
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-turchin/9/R")))
demo(h2o.kmeans)
demo(h2o.kmeans)
demo(h2o.kmeans)
library(h2o)
localH2O = h2o.init(nthreads=-1)
# Finally, let's run a demo to see H2O at work.
demo(h2o.kmeans)
# Next, we download packages that H2O depends on.
pkgs <- c("methods","statmod","stats","graphics","RCurl","jsonlite","tools","utils")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
plot(x,y, type = "l", lwd = 2, xlim = c(-3.5,3.5))
plot(x,y, type = "l", lwd = 2, xlim = c(-3.5,3.5))
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Aula 04/LinearDiscriminantNormal.R')
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Aula 04/LinearDiscriminantNormal.R')
ui = c(3, 6)
wi = (1/o^2) * ui;
matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE)
matrix(c(1,2,3, 11,12,13), byrow = TRUE)
matrix(c(1,2,3, 11,12,13), ncol = 3, byrow = TRUE)
matrix(c(2, 6), ncol = 2, byrow = TRUE)
matrix(rexp(200), 10)
matrix(rexp(200), 2)
point((0,0));
point((0 0));
point([0 0]);
points([0 0]);
points( [0 0])
points( c(0 0) )
plot(c(-1, 26), 0:1, type = "n", axes = FALSE)
plot(c(-1, 26), 0:1, type = "n", axes = FALSE)
plot(c(-1, 26), 0:1)
, type = "n", axes = FALSE
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
plot(c(y))
source('~/.active-rstudio-document')
n = c(2, 3, 5)
source('~/.active-rstudio-document')
n = c(2, 3, 5)
source('~/.active-rstudio-document')
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
mdat <- matrix(c(0,0 1,1 2,2 3,3 1,2 2,3 3,4 4,4), nrow = 8, byrow = TRUE)
mdat <- matrix(c(0,0, 1,1, 2,2, 3,3, 1,2, 2,3, 3,4 4,4), nrow = 8, byrow = TRUE)
mdat <- matrix(c(0,0, 1,1, 2,2, 3,3, 1,2, 2,3, 3,4, 4,4), nrow = 8, ncol = 2, byrow = TRUE)
mdat = matrix(c(0,0, 1,1, 2,2, 3,3, 1,2, 2,3, 3,4, 4,4), nrow = 8, ncol = 2, byrow = TRUE)
plot(c(mdat))
mdate
mdat]
mdat
plot(mdat)
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
mean(data)
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
View(dataset)
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
cbind(x1 = 3, x2 = c(4:1, 2:5))
cbind(3, c(4:1, 2:5))
data = cbind(c(0, 1, 2, 3, 1, 2, 3, 4) , c(0, 1, 2, 3, 2, 3, 4, 4))
data
rowSums(data)
colSums(data)
data = cbind(c(0, 1, 2, 3, 1, 2, 3, 4) , c(0, 1, 2, 3, 2, 3, 4, 4))
colMeas(data)
data = cbind(c(0, 1, 2, 3, 1, 2, 3, 4) , c(0, 1, 2, 3, 2, 3, 4, 4))
colMeans(data)
19/8
cov(data)
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
cov(data)
var(data)
var(data[,1])
data[,1] - rowMeans(data[,1])
data[,1] - mean(data[,1])
data[,1])
data[,1]
data[,1]'
fsdf
sdf
data[,1] - mean(transpose(data[,1]))
data
transpose(data[,1])
transpose(data[1,])
data[1,]
transpose(data[,1])
data[,1]
colMeans(data[,1])
dataset = read.csv("Summary.csv", header = TRUE, sep = ";")
source('/Volumes/Toshiba/Github/mestrado/CCO-727/Trabalho2-PSO_TSP/Results/Summary.R')
ls()
source('/Volumes/Toshiba/Github/mestrado/CCO-727/Trabalho2-PSO_TSP/Results/Summary.R')
setwd('/Volumes/Toshiba/Github/mestrado/CCO-727/Trabalho2-PSO_TSP/Results/')
dataset = read.csv("Summary.csv", header = TRUE, sep = ";")
View(dataset)
summary(dataset[,5:7])
# Relacao entre pares de caracteristicas...
pairs(dataset[,4:7])
summary(dataset[,10:11])
sd(dataset$RESULT)
summary(dataset[,10:11])
sd(dataset$BESTROUTE)
dataset = read.csv("Summary.csv", header = TRUE, sep = ";")
summary(dataset[,10:11])
pairs(dataset[,4:7])
sd(dataset$BESTROUTE)
h<-hist(dataset$BESTROUTE, breaks=50, col="grey", xlab="Resultado", ylab ='Frquência',
main='Distribuição dos resultados')
xfit<-seq(min(dataset$BESTROUTE),max(dataset$BESTROUTE),length=40)
yfit<-dnorm(xfit,mean=mean(dataset$BESTROUTE),sd=sd(dataset$BESTROUTE))
yfit <- yfit*diff(h$mids[1:2])*length(dataset$BESTROUTE)
lines(xfit, yfit, col="blue", lwd=2)
abline(v = median(dataset$BESTROUTE), col = "red") # Mediana
abline(v = mean(dataset$BESTROUTE), col = "green") # Media
min(dataset$BESTROUTE)
dataset[,min(dataset$BESTROUTE)]
dataset$BESTROUTE == min(dataset$BESTROUTE)
dataset[dataset$BESTROUTE == min(dataset$BESTROUTE)]
dataset[dataset$BESTROUTE == min(dataset$BESTROUTE),]
dataset = read.csv("Summary.csv", header = TRUE, sep = ";")
dataset = read.csv("Summary.csv", header = TRUE, sep = ";")
dataset[dataset$BESTROUTE == min(dataset$BESTROUTE),]
print.data.frame(dataset[dataset$BESTROUTE == min(dataset$BESTROUTE),])
install.packages("xtable")
library("xtable", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(xtable)
xtable(dataset[dataset$BESTROUTE == min(dataset$BESTROUTE),])
xtable(dataset[dataset$BESTROUTE == min(dataset$BESTROUTE),], type="html", file="filename.html")
xtable(dataset[dataset$BESTROUTE == min(dataset$BESTROUTE),], type="html", file="filename.html")
print.xtable(dataset[dataset$BESTROUTE == min(dataset$BESTROUTE),], type="html", file="filename.html")
xtable(dataset[dataset$BESTROUTE == min(dataset$BESTROUTE),], type="html")
print(xtable(dataset[dataset$BESTROUTE == min(dataset$BESTROUTE),]), type = "html")
dataset[dataset$BESTROUTE == min(dataset$BESTROUTE),]
pairs(dataset[,4:7])
summary(dataset[,10:11])
x <- seq(5,15,length=1000)
plot(x,
dnorm(x, mean=mean(dataset$BESTROUTE), sd=sd(dataset$BESTROUTE)),
type="l",
lwd=1)
sd(dataset$BESTROUTE)
mean(dataset$BESTROUTE)
# To specify a different mean or sd, use the args parameter to supply new values
ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 2, sd = .5))
library(ggplot2)
ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 2, sd = .5))
ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mean(dataset$BESTROUTE), sd = .5))
library(ggplot2)
ggplot(data.frame(x = c(-5000, 5000)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mean(dataset$BESTROUTE), sd = 20))
ggplot(data.frame(x = c(-500, 500)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mean(dataset$BESTROUTE), sd = 20))
dnorm(x, mean=mean(dataset$BESTROUTE), sd=sd(dataset$BESTROUTE))
x <- seq(5,15,length=1000)
plot(x,
dnorm(x, mean=mean(dataset$BESTROUTE), sd=sd(dataset$BESTROUTE)),
type="l",
lwd=1)
x <- seq(400,500,length=1000)
plot(x,
dnorm(x, mean=mean(dataset$BESTROUTE), sd=sd(dataset$BESTROUTE)),
type="l",
lwd=1)
x <- seq(350,550,length=1000)
plot(x,
dnorm(x, mean=mean(dataset$BESTROUTE), sd=sd(dataset$BESTROUTE)),
type="l",
lwd=1)
x <- seq(350,550,length=1000)
plot(x,
dnorm(x, mean=median(dataset$BESTROUTE), sd=sd(dataset$BESTROUTE)),
type="l",
lwd=1)
x <- seq(350,550,length=1000)
y <- dnorm(x, mean=mean(dataset$BESTROUTE), sd=sd(dataset$BESTROUTE))
plot(x,
y,
type="l",
lwd=1)
y <- dnorm(x, mean=mean(dataset$BESTROUTE), sd=sd(dataset$BESTROUTE))
plot(x,
y,
type="l")
library(ggplot2)
ggplot(data.frame(x = c(-500, 500)), aes(x)) +
stat_function(fun = y, args = list(mean = mean(dataset$BESTROUTE), sd = 20))
ggplot(data.frame(x = c(-500, 500)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mean(dataset$BESTROUTE), sd = sd(dataset$BESTROUTE)))
ggplot(data.frame(x = c(350, 500)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mean(dataset$BESTROUTE), sd = sd(dataset$BESTROUTE)))
library(ggplot2)
ggplot(data.frame(x = c(350, 550)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mean(dataset$BESTROUTE), sd = sd(dataset$BESTROUTE)))
library(ggplot2)
ggplot(
data.frame(x = c(350, 550)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mean(dataset$BESTROUTE), sd = sd(dataset$BESTROUTE))) +
xlab('Media')
ggplot(
data.frame(x = c(350, 550)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mean(dataset$BESTROUTE), sd = sd(dataset$BESTROUTE))) +
xlab('Resultado') +
ylab('Probabilidade')
ggplot(
data.frame(x = c(350, 550)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mean(dataset$BESTROUTE), sd = sd(dataset$BESTROUTE))) +
xlab('Resultado') +
ylab('Probabilidade') +
geom_vline(xintercept = mean(dataset$BESTROUTE), colour="green", linetype = "longdash")
sdResult <- sd(dataset$BESTROUTE)
ggplot(
data.frame(x = c(350, 550)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mean(dataset$BESTROUTE), sd = sdResult)) +
xlab('Resultado') +
ylab('Probabilidade') +
geom_vline(xintercept = mean(dataset$BESTROUTE), colour="green") + # Media
geom_vline(xintercept = (mean(dataset$BESTROUTE) - (2*sdResult)), colour="blue", linetype = "longdash") + # 95% (Media - 2*Sd)
geom_vline(xintercept = (mean(dataset$BESTROUTE) + (2*sdResult)), colour="blue", linetype = "longdash") # 95% (Media + 2*Sd)
ggplot(
data.frame(x = c(350, 550)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = meanResult, sd = sdResult, colour='red')) +
xlab('Resultado') +
ylab('Probabilidade') +
geom_vline(xintercept = meanResult, colour="green") + # Media
geom_vline(xintercept = (meanResult - (2*sdResult)), colour="blue", linetype = "longdash") + # 95% (Media - 2*Sd)
geom_vline(xintercept = (meanResult + (2*sdResult)), colour="blue", linetype = "longdash") # 95% (Med
meanResult <- mean(dataset$BESTROUTE)
ggplot(
data.frame(x = c(350, 550)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = meanResult, sd = sdResult, colour='red')) +
xlab('Resultado') +
ylab('Probabilidade') +
geom_vline(xintercept = meanResult, colour="green") + # Media
geom_vline(xintercept = (meanResult - (2*sdResult)), colour="blue", linetype = "longdash") + # 95% (Media - 2*Sd)
geom_vline(xintercept = (meanResult + (2*sdResult)), colour="blue", linetype = "longdash")
ggplot(
data.frame(x = c(350, 550)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = meanResult, sd = sdResult), colour='red') +
xlab('Resultado') +
ylab('Probabilidade') +
geom_vline(xintercept = meanResult, colour="green") + # Media
geom_vline(xintercept = (meanResult - (2*sdResult)), colour="blue", linetype = "longdash") + # 95% (Media - 2*Sd)
geom_vline(xintercept = (meanResult + (2*sdResult)), colour="blue", linetype = "longdash")
ggplot(
data.frame(x = c(350, 550)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = meanResult, sd = sdResult)) +
xlab('Resultado') +
ylab('Probabilidade') +
geom_vline(xintercept = meanResult, colour="green") + # Media
geom_vline(xintercept = (meanResult - (2*sdResult)), colour="blue", linetype = "longdash") + # 95% (Media - 2*Sd)
geom_vline(xintercept = (meanResult + (2*sdResult)), colour="blue", linetype = "longdash")
summary(dataset[,10:11])
quantile(dataset$BESTROUTE)
# Quantile
qtResult <- quantile(dataset$BESTROUTE)
qtResult
dt <- data.table(x=c(1:200),y=rnorm(200))
dens <- density(dt$y)
df <- data.frame(x=dens$x, y=dens$y)
probs <- c(0.1, 0.25, 0.5, 0.75, 0.9)
quantiles <- quantile(dt$y, prob=probs)
df$quant <- factor(findInterval(df$x,quantiles))
ggplot(df, aes(x,y)) + geom_line() + geom_ribbon(aes(ymin=0, ymax=y, fill=quant)) + scale_x_continuous(breaks=quantiles) + scale_fill_brewer(guide="none")
library(ggplot2)
dt <- data.table(x=c(1:200),y=rnorm(200))
dens <- density(dt$y)
df <- data.frame(x=dens$x, y=dens$y)
probs <- c(0.1, 0.25, 0.5, 0.75, 0.9)
quantiles <- quantile(dt$y, prob=probs)
df$quant <- factor(findInterval(df$x,quantiles))
ggplot(df, aes(x,y)) + geom_line() + geom_ribbon(aes(ymin=0, ymax=y, fill=quant)) + scale_x_continuous(breaks=quantiles) + scale_fill_brewer(guide="none")
dens <- density(dataset$BESTROUTE)
dens$x
quantile(dt$y, prob=probs)
qtResult
qtResult(1,)
qtResult[1,]
qtResult[2,]
qtResult[,]
qtResult[]
qtResult[1]
df$y
dens$y
dens <- density(dataset$BESTROUTE)
df <- data.frame(x=dens$x, y=dens$x)
probs <- c(0.1, 0.25, 0.5, 0.75, 0.9)
quantiles <- quantile(dt$y, prob=probs)
quantiles <- quantile(dt$y, .75)
quantiles <- quantile(dt$y, .75)
quantiles <- quantile(density(dataset$BESTROUTE), .75)
quantiles <- quantile(density(dataset$BESTROUTE), .75)
df <- data.frame(x=dens$x, y=dens$y)
dens <- density(dataset$BESTROUTE)
df <- data.frame(x=dens$x, y=dens$y)
dens$y
quantiles <- quantile(dt$y, prob=probs)
qtResult
#setwd('~/Documentos/MEGA/Pessoal/Estudos/Mestrado/CCO-727 Otimização Inteligente de Sistemas Produtivos/Trabalho 1 - TSP/')
minResult,
minResult
minResult <- dataset[dataset$BESTROUTE == min(dataset$BESTROUTE),]
minResult
pairs(dataset[,5:10])
pairs(dataset[,6:10])
ggpairs(dataset[,6:10], colour='Species', alpha=0.4)
library(ggplot2)
ggpairs(dataset[,6:10], colour='Species', alpha=0.4)
ggcorr(dataset[,6:10], nbreaks = 5)
gplot()+
ggcorr(dataset[,6:10], nbreaks = 5)
ggplot()+
ggcorr(dataset[,6:10], nbreaks = 5)
install.packages("GGally")
ggcorr(dataset[,6:10], nbreaks = 5)
library(ggplot2)
library(GGally)
ggcorr(dataset[,6:10], nbreaks = 5)
ggcorr(dataset[,6:10])
ggpairs(dataset[,6:10], colour='Species', alpha=0.4)
ggcorr(dataset[,6:10], palette = "RdGy", label = TRUE, label_size = 3, label_color = "white")
ggpairs(dataset[,6:10], mapping = aes(color = sex))
my_bin <- function(data, mapping, ..., low = "#132B43", high = "#56B1F7") {
ggplot(data = data, mapping = mapping) +
geom_bin2d(...) +
scale_fill_gradient(low = low, high = high)
}
pm <- ggpairs(
dataset[,6:10],
lower = list(
continuous = my_bin
)
)
pm
my_bin <- function(data, mapping, ..., low = "#132B43", high = "red") {
ggplot(data = data, mapping = mapping) +
geom_bin2d(...) +
scale_fill_gradient(low = low, high = high)
}
pairsResult <- ggpairs(
dataset[,6:10],
lower = list(
continuous = my_bin
)
)
pairsResult
my_bin <- function(data, mapping, ..., low = "#132B43", high = "red") {
ggplot(data = data, mapping = mapping) +
geom_bin2d(...) +
scale_fill_gradient(low = low, high = high)
}
pairsResult <- ggpairs(
dataset[,6:10],
columnLabels = c("W", "C1", "C2", "Cpr", "BestRoute"),
lower = list(
continuous = my_bin
)
)
pairsResult
my_bin <- function(data, mapping, ..., low = "#132B43", high = "red") {
ggplot(data = data, mapping = mapping) +
geom_bin2d(...) +
scale_fill_gradient(low = low, high = high)
}
pairsResult <- ggpairs(
dataset[,6:10],
columnLabels = c("W", "C1", "C2", "Cpr", "BestRoute"),
lower = list(
continuous = my_bin
)
) + theme_bw()
pairsResult
# Relacao entre pares de caracteristicas (influencia e correlacao)...
pairs(dataset[,6:10])
library(ggplot2)
library(GGally)
customBin <- function(data, mapping, ..., low = "#132B43", high = "red") {
ggplot(data = data, mapping = mapping) +
geom_bin2d(...) +
scale_fill_gradient(low = low, high = high)
}
pairsResult <- ggpairs(
dataset[,6:10],
columnLabels = c("W", "C1", "C2", "Cpr", "BestRoute"),
lower = list(
continuous = customBin
)
) + theme_bw()
pairsResult
customBin <- function(data, mapping, ..., low = "#132B43", high = "red") {
ggplot(data = data, mapping = mapping) +
geom_bin2d(...) +
scale_fill_gradient(low = low, high = high)
}
pairsResult <- ggpairs(
dataset[,6:10],
columnLabels = c("W", "C1", "C2", "Cpr", "BestRoute"),
lower = list(
continuous = customBin
)
) + ggtitle("Correlação de parâmetros com 'BestRoute'") + theme(plot.title = element_text(lineheight=.8, face="bold"))
pairsResult
customBin <- function(data, mapping, ..., low = "#132B43", high = "red") {
ggplot(data = data, mapping = mapping) +
geom_bin2d(...) +
scale_fill_gradient(low = low, high = high)
}
pairsResult <- ggpairs(
dataset[,6:10],
columnLabels = c("W", "C1", "C2", "Cpr", "BestRoute"),
lower = list(
continuous = customBin
),
title = "Correlação de parâmetros com 'BestResult'"
) #+ theme_bw()
pairsResult
customBin <- function(data, mapping, ..., low = "#132B43", high = "red") {
ggplot(data = data, mapping = mapping) +
geom_bin2d(...) +
scale_fill_gradient(low = low, high = high)
}
pairsResult <- ggpairs(
dataset[,6:10],
columnLabels = c("W", "C1", "C2", "Cpr", "BestRoute"),
lower = list(
continuous = customBin
),
title = "Correlação de parâmetros com 'BestRoute'"
) #+ theme_bw()
pairsResult
